<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Customer
 *
 * @author Administrator
 */
class Rocky_Newcustomercoupon_Model_Customer_Customer extends Mage_Customer_Model_Customer {

    //put your code here

    protected function _afterSave() {
        parent::_afterSave();
        $coupon = Mage::getModel('newcustomercoupon/coupon')->load($this->getId(), 'customer_id');
        if (!$coupon->getId()) {
            if (Mage::getStoreConfig('newcustomercoupon/general/enable')) {
                $id = (int) Mage::getStoreConfig('newcustomercoupon/general/ruleid');
                $rule = Mage::getModel('salesrule/rule')->load($id);
                if ($rule->getId()) {
                    $generator = $rule->getCouponMassGenerator();
                    $data = array(
                        'rule_id' => $rule->getId(),
                        'length' => Mage::getStoreConfig('promo/auto_generated_coupon_codes/length'),
                        'format' => is_numeric(Mage::getStoreConfig('promo/auto_generated_coupon_codes/format')) ? 'alphanum' : Mage::getStoreConfig('promo/auto_generated_coupon_codes/format'),
                        'prefix' => Mage::getStoreConfig('promo/auto_generated_coupon_codes/prefix'),
                        'suffix' => Mage::getStoreConfig('promo/auto_generated_coupon_codes/suffix'),
                        'dash' => Mage::getStoreConfig('promo/auto_generated_coupon_codes/dash'),
                        'qty' => 1
                    );
                    $generator->setData($data);
                    $maxAttempts = Mage_SalesRule_Model_Coupon_Massgenerator::MAX_GENERATE_ATTEMPTS;
                    $attempt = 0;
                    do {
                        if ($attempt >= $maxAttempts) {
                            Mage::throwException(Mage::helper('salesrule')->__('Unable to create requested Coupon Qty. Please check settings and try again.'));
                        }
                        $code = $generator->generateCode();
                        $attempt++;
                    } while ($generator->getResource()->exists($code));
                }
            }
            if ($code) {

                $expirationDate = $generator->getToDate();
                if ($expirationDate instanceof Zend_Date) {
                    $expirationDate = $expirationDate->toString(Varien_Date::DATETIME_INTERNAL_FORMAT);
                }
                $now = $generator->getResource()->formatDate(
                        Mage::getSingleton('core/date')->gmtTimestamp()
                );
                try {
                    $coupon = Mage::getModel('salesrule/coupon');
                    $coupon->setId(null)
                            ->setRuleId($generator->getRuleId())
                            ->setUsageLimit($generator->getUsesPerCoupon())
                            ->setUsagePerCustomer($generator->getUsesPerCustomer())
                            ->setExpirationDate($expirationDate)
                            ->setCreatedAt($now)
                            ->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED)
                            ->setCode($code)
                            ->save();

                    $customerCoupon = Mage::getModel('newcustomercoupon/coupon');
                    $customerCoupon->setId(null)
                            ->setCoupon($code)
                            ->setCustomerId($this->getId())
                            ->save();

                    $this->setData('newcustomercoupon',$code);
					
					$customerData = Mage::getModel('customer/customer')->load($this->getId())->getData();
					
					 $emailTemplate  = Mage::getModel('core/email_template')
                    ->loadDefault('notify_new_customer1');

                $emailTemplate
                    ->setSenderName('NetaKart')
                    ->setSenderEmail('support@netakart.com')
                    ->setTemplateSubject('Promo Code');
                // $data = $observer->getCustomer()->getData(); */
                $emailTemplateVariables = array();

                $emailTemplateVariables['username']= $customerData['firstname'].' '.$customerData['lastname'];
                $emailTemplateVariables['customer_email']   = $customerData['email'];
                $emailTemplateVariables['promo_code'] = $code;
                $emailTemplate->send($customerData['email'],$customerData['firstname'].' '.$customerData['lastname'], $emailTemplateVariables);
					
					
					
                } catch (Exception $e) {
                    $this->setData('newcustomercoupon','');
                }
            }
        }
        
        return $this;
    }
}
?>
